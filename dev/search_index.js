var documenterSearchIndex = {"docs":
[{"location":"manual/#User-manual-1","page":"Manual","title":"User manual","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"This section describes how to use QuakeML.jl to read and write QuakeML files, and how to create objects which describe sets of seismic events.","category":"page"},{"location":"manual/#Preamble-1","page":"Manual","title":"Preamble","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The following examples all assume that you have first used the module like so:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"using QuakeML","category":"page"},{"location":"manual/#Namespace-issues-1","page":"Manual","title":"Namespace issues","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"QuakeML.jl deliberately does not export the types it uses by default, since their names follow those in the QuakeML specification, and they are quite generic to seismic processing—for example, Event and Phase. The recommended way to interact with QuakeML.jl in the REPL or in your own packages is to always use the module name (or an alias of it).","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For instance, to define an empty set of events, which are held in the type EventParameters, you would write","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"events = QuakeML.EventParameters()","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nIf you really want to bring the QuakeML.jl types into scope without manually importing them, then there is an option.  You can do using QuakeML.Types.  Note that this API is not yet stable and use of the Types module is recommended only for interactive use or throwaway scripts.","category":"page"},{"location":"manual/#Important-types-1","page":"Manual","title":"Important types","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For a full list of QuakeML types, see Types.  The following are a few of the most important when defining one's own catalogues.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"EventParameters is the root type, and contains one or more Events.\nAn Event defines a known single source of seismic energy, which may contain one or several\nOrigins.  Each Origin is one interpretation of the data, potentially containing information about the source location, origin time, focal mechanism, magnitude, and so on.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The types in this package are directly named after those in the QuakeML specification.  Similarly, the fields of each type are named to match the names of the attributes and elements of each QuakeML type. Note however that rather than use camel case likeThis for these field names, in this package we use snake case like_this. Therefore translating between the XML and QuakeML.jl representations of things in the specification should be simple.","category":"page"},{"location":"manual/#Sample-data-1","page":"Manual","title":"Sample data","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"QuakeML.jl comes with a few sample data sets.  To access these, you can define the path to them using the pathof function from Base.  We will call this path data_dir:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"data_dir = joinpath(dirname(dirname(pathof(QuakeML))), \"test\", \"data\")","category":"page"},{"location":"manual/#Reading-1","page":"Manual","title":"Reading","text":"","category":"section"},{"location":"manual/#On-disk-data-1","page":"Manual","title":"On-disk data","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"To read a set of events from disk, one simply calls QuakeML.read:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"nepal_event = QuakeML.read(joinpath(data_dir, \"nepal_mw7.2.qml\"))","category":"page"},{"location":"manual/#Strings-1","page":"Manual","title":"Strings","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"To read from a String which contains QuakeML, you use QuakeML.readstring:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"qml_string = \"\"\"\n           <?xml version=\"1.0\"?>\n           <quakeml xmlns=\"http://quakeml.org/xmlns/quakeml/1.2\">\n               <eventParameters publicID=\"smi:local/events/XXX\">\n                   <event publicID=\"smi:local/event/A\">\n                   </event>\n               </eventParameters>\n           </quakeml>\n           \"\"\";\nevents = QuakeML.readstring(qml_string)","category":"page"},{"location":"manual/#Writing-1","page":"Manual","title":"Writing","text":"","category":"section"},{"location":"manual/#Writing-to-disk-or-subtype-of-IO-1","page":"Manual","title":"Writing to disk or subtype of IO","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"To write a set of events to a file on disk, call write(io, events).","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"write(\"nepal.xml\", nepal_event)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"You can easily verify that the file written is identical to the one we read:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"QuakeML.read(\"nepal.xml\") == nepal_event","category":"page"},{"location":"manual/#Converting-to-a-string-1","page":"Manual","title":"Converting to a string","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"To convert a set of events into a String for subsequent processing, first convert the EventParameters object into an XML document, then call string:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"string2 = string(quakeml(events))","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nOne could also create a Base.IOBuffer and write to that directly.","category":"page"},{"location":"manual/#Converting-to-an-in-memory-XML-document-1","page":"Manual","title":"Converting to an in-memory XML document","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Internally, QuakeML.jl uses EzXML.jl to parse XML strings and create XML objects from EventParameters. If you are happy to use EzXML, you can create an XML document (an EzXML.Document) by calling quakeml on an EventParameters object.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"xml = quakeml(nepal_event)\ntypeof(xml)","category":"page"},{"location":"manual/#Accessing-fields-1","page":"Manual","title":"Accessing fields","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"In QuakeML.jl, all fields of types are publicly-accessible and part of the API.  It is intended that users will directly access and manipulate these fields.  Where restrictions on fields exist (for instance, where strings can be only a certain number of characters long, or can only consist of certain characters), these are enforced both upon construction of types and when changing fields (via setproperty!).","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For example, to get the coordinate of the Nepal event we read in earlier, you access the fields directly:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"nepal_event.event[1]","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"This returns the first Event in the event field.  event is a Vector{Event}, and may be empty.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"In QuakeML, any Event may have several Origins.  Each Origin describes a unique onset time and location of the event.  Usually, one of these origins is the 'preferred' origin.  Typically, one uses preferred_origin to return this and then uses the origin parameters within the particular Origin.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"o = preferred_origin(nepal_event.event[1])\nlon, lat = o.longitude.value, o.latitude.value","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nNote that the longitude and latitude of an Origin are QuakeML.RealQuantitys.  As well as the value field which contains the nominal value of the quantity, they can also contain uncertainties.  Hence in this case, we needed to access the actual value of longitude like o.longitude.value, and similarly for latitude.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Almost all types (apart from Enumerated types) are mutable structs, which means that their fields can be changed after construction. Almost all types have at least one field which is optional.  In QuakeML.jl, these can either take a concrete value, or missing. Hence setting any optional field to missing (like origin.depth = missing) will remove that value.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Where multiple values of a field are allowed (such as the origin field of an Event), these are represented by Vectors, and can be empty.","category":"page"},{"location":"#QuakeML.jl-1","page":"Home","title":"QuakeML.jl","text":"","category":"section"},{"location":"#What-is-[QuakeML.jl](https://github.com/anowacki/QuakeML.jl)?-1","page":"Home","title":"What is QuakeML.jl?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia package for reading and writing files in the QuakeML format, which describes the properties of sets of seismic events, such as earthquakes and explosions.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package is primarily meant to be used by other software to correctly and reliably interact with QuakeML files.  For example, Seis.jl and its related libraries use QuakeML.jl to parse QuakeML files, but do not expose QuakeML.jl types or functions to the user.  Though QuakeML.jl is intended to be used as software by other software, it is still a goal that it should be easy to use directly and well-documented and -tested.","category":"page"},{"location":"#Note-on-naming-1","page":"Home","title":"Note on naming","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In this documentation, ‘QuakeML’ refers to the QuakeML standard, and ‘QuakeML.jl’ refers to this Julia package, which implements the QuakeML standard.","category":"page"},{"location":"#Current-version-1","page":"Home","title":"Current version","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The current version of QuakeML is 1.2.  This is the version of QuakeML supported by QuakeML.jl.","category":"page"},{"location":"#How-to-install-1","page":"Home","title":"How to install","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"QuakeML.jl can be added to your Julia environment like so:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"QuakeML\")","category":"page"},{"location":"#Testing-1","page":"Home","title":"Testing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To check that your install is working correctly, you can run the package's tests by doing:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.test(\"QuakeML\")","category":"page"},{"location":"function-index/#Function-index-1","page":"Function index","title":"Function index","text":"","category":"section"},{"location":"function-index/#Public-types-and-functions-1","page":"Function index","title":"Public types and functions","text":"","category":"section"},{"location":"function-index/#IO-1","page":"Function index","title":"IO","text":"","category":"section"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"QuakeML.read(filename::AbstractString)\nQuakeML.readstring\nwrite(io::IO, qml::EventParameters; kwargs...)\nquakeml","category":"page"},{"location":"function-index/#QuakeML.read-Tuple{AbstractString}","page":"Function index","title":"QuakeML.read","text":"read(filename) -> ::EventParameters\n\nRead a QuakeML file with name filename from disk and return an EventParameters object.\n\nread(io) -> ::EventParameters -> ::EventParameters\n\nRead a QuakeML document from the stream io.\n\n\n\n\n\n","category":"method"},{"location":"function-index/#QuakeML.readstring","page":"Function index","title":"QuakeML.readstring","text":"readstring(xml_string) -> ::EventParameters\n\nRead the QuakeML contained in xml_string and return a EventParameters object.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#Base.write-Tuple{IO,EventParameters}","page":"Function index","title":"Base.write","text":"write(io, qml::EventParameters; kwargs...)\n\nWrite a set of EventParameters to io.  kwargs are passed to quakeml to control the creation of the XML representing the catalogue.\n\nExamples\n\n(Note that \"example_quakeml_file.xml\" may not exist.)\n\nWrite a file with the default settings\n\njulia> qml = QuakeML.read(\"example_quakeml_file.xml\");\n\njulia> write(\"new_file.xml\", qml)\n\nWrite a file with custom version\n\njulia> write(\"new_file2.xml\", qml, version=\"1.1\")\n\n\n\n\n\n","category":"method"},{"location":"function-index/#QuakeML.quakeml","page":"Function index","title":"QuakeML.quakeml","text":"quakeml(qml::EventParameters; version=\"1.2\") -> xml::EzXML.XMLDocument\n\nCreate an XML document from qml, a set of events of type EventParameters. xml is an EzXML.XMLDocument suitable for output.\n\nThe user may also set the nominal version of QuakeML created.\n\nThe QuakeML document xml may be written with write(io, xml) or converted to a string with string(xml).\n\n\n\n\n\n","category":"function"},{"location":"function-index/#Accessors-1","page":"Function index","title":"Accessors","text":"","category":"section"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"preferred_focal_mechanism\npreferred_magnitude\npreferred_origin\nhas_focal_mechanism\nhas_magnitude\nhas_origin","category":"page"},{"location":"function-index/#QuakeML.preferred_focal_mechanism","page":"Function index","title":"QuakeML.preferred_focal_mechanism","text":"preferred_focal_mechanism(event; verbose=false) -> focal_mechanism\n\nReturn the preferred focal mechanism for an event.  This may be defined if there is more than one focal mechanism given for an event, and the preferred_focal_mechanism_id field is set.  If there is only one focal mechanism for this event, then that is returned.  If there is no focal mechanism associated with this event which matches the stated preferred_focal_mechanism_id, then the first focal mechanism is returned, and a warning given is verbose is true.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#QuakeML.preferred_magnitude","page":"Function index","title":"QuakeML.preferred_magnitude","text":"preferred_magnitude(event; verbose=false) -> magnitude\n\nReturn the preferred magnitude for an event.  This may be defined if there is more than one magnitude given for an event, and the preferred_magnitude_id field is set.  If there is only one magnitude for this event, then that is returned.  If there is no magnitude associated with this event which matches the stated preferred_magnitude_id, then the first magnitude is returned, and a warning given is verbose is true.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#QuakeML.preferred_origin","page":"Function index","title":"QuakeML.preferred_origin","text":"preferred_origin(event; verbose=false) -> origin\n\nReturn the preferred origin for an event.  This may be defined if there is more than one origin given for an event, and the preferred_origin_id field is set.  If there is only one origin for this event, then that is returned.  If there is no origin associated with this event which matches the stated preferred_origin_id, then the first origin is returned and a warning is given when verbose=true\n\n\n\n\n\n","category":"function"},{"location":"function-index/#QuakeML.has_focal_mechanism","page":"Function index","title":"QuakeML.has_focal_mechanism","text":"has_focal_mechanism(event) -> ::Bool\n\nReturn true if event contains one or more focal mechanisms defined.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#QuakeML.has_magnitude","page":"Function index","title":"QuakeML.has_magnitude","text":"has_magnitude(event) --> ::Bool\n\nReturn true if event has one or more magnitudes defined.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#QuakeML.has_origin","page":"Function index","title":"QuakeML.has_origin","text":"has_origin(event) -> ::Bool\n\nReturn true if event has one or more origins defined.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#Types-1","page":"Function index","title":"Types","text":"","category":"section"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"Where a constructor's arguments are given as Constructor(; kwargs...), this means that each listed field name can be given as a keyword argument and a value passed to the constructor that way.","category":"page"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"note: Note\nBy default, calling a constructor for a type which is required to have a public ID (URI) by the QuakeML specification creates a unique, random URI for that object.  To specify your own ID for an object, provide a String to the constructor's public_id keyword argument; or you can later set the public_id field directly. See ResourceReference for details of the form that URIs must take.","category":"page"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"QuakeML.Amplitude\nQuakeML.Arrival\nQuakeML.Axis\nQuakeML.Comment\nQuakeML.CompositeTime\nQuakeML.ConfidenceEllipsoid\nQuakeML.CreationInfo\nQuakeML.DataUsed\nQuakeML.Event\nQuakeML.EventDescription\nQuakeML.EventParameters\nQuakeML.FocalMechanism\nQuakeML.IntegerQuantity\nQuakeML.Magnitude\nQuakeML.MomentTensor\nQuakeML.NodalPlane\nQuakeML.NodalPlanes\nQuakeML.Origin\nQuakeML.OriginQuality\nQuakeML.OriginUncertainty\nQuakeML.Phase\nQuakeML.Pick\nQuakeML.PrincipleAxes\nQuakeML.RealQuantity\nQuakeML.ResourceReference\nQuakeML.SourceTimeFunction\nQuakeML.StationMagnitude\nQuakeML.StationMagnitudeContribution\nQuakeML.Tensor\nQuakeML.TimeQuantity\nQuakeML.TimeWindow\nQuakeML.WaveformStreamID","category":"page"},{"location":"function-index/#QuakeML.Amplitude","page":"Function index","title":"QuakeML.Amplitude","text":"Amplitude(; kwargs...)\n\nRepresents a quantification of the waveform anomaly, usually a single amplitude measurement or a measurement of the visible signal duration for duration magnitudes.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Amplitude. (Required field.)\ngenericAmplitude :: RealQuantity: Measured amplitude value for the given waveform_id. Note that this attribute can describe different physical quantities, depending on the type and category of the amplitude. These can be, e.g., displacement, velocity, or a period. If the only amplitude information is a period, it has to specified here, not in the period field. The latter can be used if the amplitude measurement contains information on, e.g., displacement and an additional period. Since the physical quantity described by this attributeis not fixed, the unit of measurement cannot be defined in advance. However, the quantity has to be specified in SI base units. The enumeration given in the field unit provides the most likely units that could be needed here. For clarity, using the optional unit field is highly encouraged. (Required field.)\ntype :: String: String that describes the type of amplitude using the nomenclature from Storchak et al. (2003). Possible values include unspecified amplitude reading (\"A\"), amplitude reading for local magnitude (\"AML\"), amplitude reading for body wave magnitude (\"AMB\"), amplitude reading for surface wave magnitude (\"AMS\"), and time of visible end of record for duration magnitude (\"END\"). It has a maximum length of 32 characters.\ncategory :: AmplitudeCategory: This field describes the way the waveform trace is evaluated to derive an amplitude value. This can be just reading a single value for a given point in time (\"point\"), taking a mean value over a time interval (\"mean\"), integrating the trace over a time interval (\"integral\"), specifying just a time interval (\"duration\"), or evaluating a period (\"period\").  (See AmplitudeCategory.)\n\"point\"\n\"mean\"\n\"duration\"\n\"period\"\n\"integral\"\n\"other\"\nunit :: AmplitudeUnit: This field provides the most likely measurement units for the physical quantity described in the generic_Amplitude field. Possible values are specified as combinations of SI base units. (See AmplitudeUnit\n\"m\"\n\"s:\n\"m/s\"\n\"m/(s*s)\"\n\"m*s\"\n\"dimensionless\"\n\"other\"\nmethod_id :: ResourceReference: Describes the method of amplitude determination.\nperiod :: RealQuantity: Dominant period in the time_window in case of amplitude measurements.  Not used for duration magnitude.  Unit: s.\nsnr :: Float64: Signal-to-noise ratio of the spectrogram at the location the amplitude was measured.\ntime_window :: TimeWindow: Description of the time window used for amplitude measurement. Recommended for duration magnitudes.\npick_id :: ResourceReference: Refers to the public_id of an associated Pick object.\nwaveform_id :: ResourceReference: Identifies the waveform stream on which the amplitude was measured.\nfilter_id :: ResourceReference: Identifies the filter or filter setup used for filtering the waveform stream referenced by waveform_id.\nscaling_time :: TimeQuantity: Scaling time for amplitude measurement.\nmagnitude_hint :: String: Type of magnitude the amplitude measurement is used for.  For valid values see Magnitude. String value with a maximum length of 32 characters.\nevaluation_mode :: EvaluationMode: Evaluation mode of Amplitude (see EvaluationMode).\nevaluation_status :: EvaluationStatus: Evaluation status of Amplitude (see EvaluationStatus).\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the Amplitude object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Arrival","page":"Function index","title":"QuakeML.Arrival","text":"Arrival(; kwargs...)\n\nSuccessful association of a pick with an origin qualifies this pick as an arrival. An arrival thus connects a pick with an origin and provides additional attributes that describe this relationship. Usually qualification of a pick as an arrival for a given origin is a hypothesis, which is based on assumptions about the type of arrival (phase) as well as observed and (on the basis of an earth model) computed arrival times, or the residual, respectively. Additional pick attributes like the horizontal slowness and backazimuth of the observed wave—especially if derived from array data—may further constrain the nature of the arrival.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Arrival. (Required field.)\npick_id :: ResourceReference: Refers to a public_id of a Pick. (Required field.)\nphase :: Phase: Phase identification. For possible values, please refer to the description of the Phase type.  (Required field.)\ntime_correction :: Float64: Time correction value. Usually, a value characteristic for the station at which the pick was detected, sometimes also characteristic for the phase type or the slowness. Unit: s.\nazimuth :: Float64: Azimuth of station as seen from the epicenter. Unit: °.\ndistance :: Float64: Epicentral distance.  Unit: °.\ntakeoff_angle :: RealQuantity: Angle of emerging ray at the source, measured against the downward normal direction.  Unit: °.\ntime_residual :: Float64: Residual between observed and expected arrival time assuming proper phase identification and given the earth_model_id of the Origin, taking into account the timeCorrection.  Unit: s.\nhorizontal_slowness_residual :: Float64: Residual of horizontal slowness and the expected slowness given the current origin (refers to field horizontal_slowness of Pick).  Unit: s/°\nbackazimuthResidual :: Float64: Residual of backazimuth and the backazimuth computed for the current origin (refers to field backazimuth of Pick).  Unit: °.\ntime_weight :: Float64: Weight of the arrival time for computation of the associated Origin. Note that the sum of all weights is not required to be unity.\nhorizontal_slowness_weight :: Float64: Weight of the horizontal slowness for computation of the associated Origin. Note that the sum of all weights is not required to be unity.\nbackazimuth_weight :: Float64: Weight of the backazimuth for computation of the associated Origin. Note that the sum of all weights is not required to be unity.\nearth_model_id :: ResourceReference: Earth model which is used for the association of Arrival to Pick and computation of the residuals.\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the Arrival object\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Axis","page":"Function index","title":"QuakeML.Axis","text":"Axis(; azimuth, plunge, length)\n\nDescribes an eigenvector of a moment tensor expressed in its principal-axes system. It uses the angles azimuth, plunge, and the eigenvalue length.\n\nList of fields\n\nazimuth :: RealQuantity: Azimuth of eigenvector of moment tensor expressed in principal-axes system. Measured clockwisefrom south-north direction at epicenter.  Unit: °. (Required field.)\nplunge :: RealQuantity: Plunge of eigenvector of moment tensor expressed in principal-axes system. Measured against downward vertical direction at epicenter. Unit: °. (Required field.)\nlength :: RealQuantity: Eigenvalue of moment tensor expressed in principal-axes system. Unit: N m. (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Comment","page":"Function index","title":"QuakeML.Comment","text":"Comment(; text, creation_info, id)\n\nHolds information on comments to a resource as well as author and creation time information.\n\nList of fields\n\ntext :: String: Text of comment. (Required field.)\ncreation_info :: CreationInfo: CreationInfo for the Comment object.\nid :: ResourceReference: Identifier of comment, in QuakeML URI format.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.CompositeTime","page":"Function index","title":"QuakeML.CompositeTime","text":"CompositeTime(; year, month, day, hour, minute, second)\n\nFocal times differ significantly in their precision. While focal times of instrumentally located earthquakes areestimated precisely down to seconds, historic events have only incomplete time descriptions. Sometimes, even contradictory information about the rupture time exist.  The CompositeTime type allows for such complex descriptions. If the specification is given with no greater accuracy than days (i.e., no time components are given), the date refers to local time. However, if time components are given, they have to refer to UTC.\n\nAs an example, consider a historic earthquake in California, e.g., on 28 February 1730, with no time information given. Expressed in UTC, this day extends from 1730-02-28T08:00:00Z until 1730-03-01T08:00:00Z. Such a specification would be against intuition. Therefore, for date-time specifications without time components, local time is used. In the example, the CompositeTime fields are simply year=1730, month=2, and day=28. In the corresponding time attribute of the origin, however, UTC has to be used. If the unknown time components are assumed to be zero, the value is DateTime(\"1730-02-28T08:00:00\").\n\nList of fields\n\nyear ::IntegerQuantity: Year or range of years of the event’s focal time.\nmonth ::IntegerQuantity: Month or range of months of the event’s focal time.\nday ::IntegerQuantity: Day or range of days of the event’s focal time.\nhour ::IntegerQuantity: Hour or range of hours of the event’s focal time.\nminute ::IntegerQuantity: Minute or range of minutes of the event’s focal time.\nsecond :: RealQuantity: Second and fraction of seconds or range of seconds with fraction of the event’s focal time.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.ConfidenceEllipsoid","page":"Function index","title":"QuakeML.ConfidenceEllipsoid","text":"ConfidenceEllipsoid(; kwargs...)\n\nThis type represents a description of the location uncertainty as a confidence ellipsoid with arbitrary orientationin space.  The orientation of a rigid body in three-dimensional Euclidean space can be described by three parameters.  We use the convention of Euler angles, which can be interpreted as a composition of three elemental rotations (i.e., rotations around a single axis). In the special case of Euler angles we use here, the angles are referred to as Tait-Bryan (or Cardan) angles. These angles may be familiar to the reader from their application in flight dynamics, and are referred to as heading (yaw, ψ), elevation (attitude, pitch, φ), and bank (roll, θ). For a definition of the angles, see Figure 4 of the QuakeML specification document at https://quake.ethz.ch/quakeml/docs/latest?action=AttachFile&do=get&target=QuakeML-BED.pdf. Through the three elemental rotations, a Cartesian system (x,y,z) centered at the epicenter, with the south-north direction x, the west-east direction y, and the downward vertical direction z, is transferred into a different Cartesian system (X,Y,Z) centered on the confidence ellipsoid. Here, X denotes the direction of the major axis, and Y denotes the direction of the minor axis of the ellipsoid. Note that Figure 4 can be interpreted as a hypothetical view from the interior of the Earth to the inner face of a shell representing Earth's surface.\n\nThe three Tait-Bryan rotations are performed as follows: (i) a rotation about the Z axis with angle ψ (heading, or azimuth); (ii) a rotation about the Y axis with angle φ (elevation, or plunge); and (iii) a rotation about the X axis with angle θ (bank). Note that in the case of Tait-Bryan angles, the rotations are performed about the ellipsoid's axes, not about the axes of the fixed (x,y,z) Cartesian system.\n\nList of fields\n\nsemi_major_axis_length :: Float64: Largest uncertainty, corresponding to the semi-major axis of the confidence ellipsoid.  Unit: m.  (Required field.)\nsemi_minor_axis_length :: Float64: Smallest uncertainty, corresponding to the semi-minor axis of the confidence ellipsoid.  Unit: m.  (Required field.)\nsemi_intermediate_axis_length :: Float64: Uncertainty in direction orthogonal to major and minor axesof the confidence ellipsoid.  Unit: m.  (Required field.)\nmajor_axis_plunge :: Float64: Plunge angle of major axis of confidence ellipsoid. Corresponds to Tait-Bryan angle φ.  Unit: °.  (Required field.)\nmajor_axis_azimuth :: Float64: Azimuth angle of major axis of confidence ellipsoid. Corresponds to Tait-Bryan angle ψ.  Unit: °.  (Required field.)\nmajor_axis_rotation :: Float64: This angle describes a rotation about the confidence ellipsoid's major axis which is required to define the direction of the ellipsoid's minor axis. Corresponds to Tait-Bryan angle θ.  Unit: °.  (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.CreationInfo","page":"Function index","title":"QuakeML.CreationInfo","text":"CreationInfo(; kwargs...)\n\nUsed to describe creation metadata (author, version, and creation time) of a resource.\n\nList of fields\n\nagency_id :: String: Designation of agency that published a resource. The string has a maximum length of 64 characters.\nagency_uri :: ResourceReference: URI of the agency that published a resource.\nauthor :: String: Name describing the author of a resource. The string has a maximum length of 128 characters.\nauthor_uri :: ResourceReference: URI of the author of a resource.\ncreation_time :: Dates.DateTime: Time of creation of a resource, in ISO 8601 format. It has to be given in UTC.\nversion :: String: Version string of a resource.  The string has a maximum length of 64 characters.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.DataUsed","page":"Function index","title":"QuakeML.DataUsed","text":"DataUsed(; kwargs...)\n\nDescribes the type of data that has been used for a moment-tensor inversion.\n\nList of fields\n\nwave_type : DataUsedWaveType: Type of waveform data. This can be one of the following values (see DataUsedWaveType):\n\"P waves\"\n\"body waves\"\n\"surface waves\"\n\"mantle waves\"\n\"combined\"\n\"unknown\"\n(Required field.)\nstation_count :: Int: Number of stations that have contributed data of the type given in wave_type.\ncomponent_count :: Int: Number of data components of the type given in wave_type.\nshortest_period :: Float64: Shortest period present in data.  Unit: s.\nlongest_period :: Float64: Longest period present in data.  Unit: s.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Event","page":"Function index","title":"QuakeML.Event","text":"Event(; kwargs...)\n\nDescribes a seismic event which does not necessarily need to be a tectonic earthquake. An event is usually associated with one or more origins, which contain information about focal time and geographic allocation of the event. Multiple origins can cover automatic and manual locations, a set of location from different agencies, locations generated with different location programs and earth models, etc. Furthermore, an eventis usually associated with one or more magnitudes, and with one or more focal mechanism determinations. In standard QuakeML-BED, Origin, Magnitude, StationMagnitude, and FocalMechanism are fields of Event. In BED-RT (the real-time version) all these fields are on the same hierarchy level as child elements of EventParameters.  The association of origins, magnitudes, and focal mechanisms to a particular event is expressed using references inside Event.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Event. (Required field.)\npreferred_origin_id :: ResourceReference: Refers to the public_id of the preferred_origin object.\npreferred_magnitude_id :: ResourceReference: Refers to the public_id of the preferred_magnitude object.\npreferred_focal_mechanism_id :: ResourceReference: Refers to the public_idof the preferred_focal_mechanism object.\ntype :: EventType: Describes the type of an event (Storchak et al. 2012). Allowed values are the following (see EventType):\n\"not existing\"\n\"not reported\"\n\"earthquake\"\n\"anthropogenic event\"\n\"collapse\"\n\"cavity collapse\"\n\"mine collapse\"\n\"building collapse\"\n\"explosion\"\n\"accidental explosion\"\n\"chemical explosion\"\n\"controlled explosion\"\n\"experimental explosion\"\n\"industrial explosion\"\n\"mining explosion\"\n\"quarry blast\"\n\"road cut\"\n\"blasting levee\"\n\"nuclear explosion\"\n\"induced or triggered event\"\n\"rock burst\"\n\"reservoir loading\"\n\"fluid injection\"\n\"fluid extraction\"\n\"crash\"\n\"plane crash\"\n\"train crash\"\n\"boat crash\"\n\"other event\"\n\"atmospheric event\"\n\"sonic boom\"\n\"sonic blast\"\n\"acoustic noise\"\n\"thunder\"\n\"avalanche\"\n\"snow avalanche\"\n\"debris avalanche\"\n\"hydroacoustic event\"\n\"ice quake\"\n\"slide\"\n\"landslide\"\n\"rockslide\"\n\"meteorite\"\n\"volcanic eruption\"\ntype_certainty :: EventTypeCertainty: Denotes how certain the information on event type is (Storchak et al. 2012). Allowed values are the following  (see EventTypeCertainty):\n\"known\"\n\"suspected\"\ndescription :: Vector{EventDescription} Additional event description, like earthquake name, Flinn-Engdahl region, etc.\ncomment :: Vector{Comment}: Comments.\ncreation_info :: CreationInfo: CreationInfo for the Event object.\norigin :: Vector{Event}: Set of Origins associated with this Event.  One of these may be the preferred origin, in which case preferredoriginid` should be set.\nmagnitude :: Vector{Magnitude}: Set of Magnitudes for this Event.  One of these may be the preferred magnitude, in which case preferred_magnitude_id should be set.\nstation_magnitude :: Vector{StationMagnitude}: Set of StationMagnitudes contributing to the magnitude of this event.\nfocal_mechanism :: Vector{FocalMechanism}: Set of FocalMechanisms for this event.  One of these may be the preferred focal mechanism, in which case preferred_focal_mechanism_id should be set.\npick :: Vector{Pick}: Set of Picks made from this event.\namplitude :: Vector{Amplitude}: Set of Amplitudes measured at stations from this event.\n\n(Note: The additional real-time fields origin_reference, magnitude_reference and focal_mechanism_reference are not yet implemented.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EventDescription","page":"Function index","title":"QuakeML.EventDescription","text":"EventDescription(; text, type)\n\nFree-form string with additional event description.  This can be a well-known name, like \"1906 San Francisco Earthquake\". A number of categories can be given in type.\n\nList of fields\n\ntext :: String: Free-form text with earthquake description. (Required field.)\ntype :: EventDescriptionType: Category of earthquake description. Values can be taken from the following:\n\"felt report\"\n\"Flinn-Engdahl region\"\n\"local time\"\n\"tectonic summary\"\n\"nearest cities\"\n\"earthquake name\"\n\"region name\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EventParameters","page":"Function index","title":"QuakeML.EventParameters","text":"EventParameters(; comment, event, description, creation_info, public_id)\n\nRoot type of QuakeML.  EventParameters objects contain a set of events and a QuakeML XML file can contain only one EventParameters object.\n\nIn the bulletin-type (non real-time) model, this type serves as a container for Event objects. In the real-time version, it can hold objects of type Event, Origin, Magnitude, StationMagnitude, FocalMechanism, Reading, Amplitude, and Pick.\n\nList of fields\n\nevent :: Vector{Event}: Set of Events making up a catalog or collection of events.\ndescription :: String: Description string that can be assigned to the earthquake catalog, or collection of events.\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the earthquake catalog.\npublic_id :: ResourceReference: Resource identifier of EventParameters. (Required field.)\n\nnote: Note\nAt present, QuakeML.jl only supports the non-real-time version of QuakeML.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.FocalMechanism","page":"Function index","title":"QuakeML.FocalMechanism","text":"FocalMechanism(; kwargs...)\n\nDescribes the focal mechanism of an event. It includes different descriptions like nodal planes, principal axes, and a moment tensor. The moment tensor description is provided by objects of the type MomentTensor which can be specified as fields of FocalMechanism.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of FocalMechanism. (Required field.)\ntriggering_origin_id :: ResourceReference: Refers to the public_id of the triggering origin.\nnodal_planes :: NodalPlanes: Nodal planes of the focal mechanism.\nprincipal_axes :: PrincipleAxes: Principal axes of the focal mechanism.\nazimuthal_gap :: Float64: Largest azimuthal gap in distribution of stations used for determination of focal mechanism.  Unit: °.\nstation_polarity_count :: Int: Number of station polarities used for determination of focal mechanism.\nmisfit :: Float64: Fraction of misfit polarities in a first-motion focal mechanism determination. Decimal fraction between 0 and 1.\nstation_distribution_ratio :: Float64: Station distribution ratio (STDR) parameter. Indicates how the stations are distributed about the focal sphere (Reasenberg and Oppenheimer 1985). Decimal fraction between 0 and 1.\nmethod_id :: ResourceReference: Resource identifier of the method used for determination of the focal mechanism.\nwaveform_id :: Vector{ResourceReference}: Refers to a set of waveform streams from which the focal mechanism was derived.\nevaluation_mode :: EvaluationMode: Evaluation mode of FocalMechanism (see EvaluationMode).\nevaluation_status :: EvaluationStatus: Evaluation status of FocalMechanism (see EvaluationStatus).\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the FocalMechanism object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.IntegerQuantity","page":"Function index","title":"QuakeML.IntegerQuantity","text":"IntegerQuantity(; kwargs...)\n\nPhysical quantities that can be expressed numerically—either as integers or as floating point numbers—are represented by their measured or computed values and optional values for symmetric or upper and lower uncertainties. The interpretation of these uncertainties is not defined in the standard. They can contain statistically well-defined error measures, but the mechanism can also be used to simply describe a possible value range. Ifthe confidence level of the uncertainty is known, it can be listed in the optional field confidence_level. Note that uncertainty, upper_uncertainty, and lower_uncertainty are given as absolute values of the deviation from the main value.\n\nList of fields\n\nvalue :: Int: Value of the quantity. The unit is implicitly defined and depends on the context. (Required field.)\nuncertainty :: Int: Uncertainty as the absolute value of symmetric deviation from the main value.\nlower_uncertainty :: Int: Uncertainty as the absolute value of deviation from the main value towards smaller values.\nupper_uncertainty :: Int: Uncertainty as the absolute value of deviation from the main value towards larger values.\nconfidence_level :: Float64: Confidence level of the uncertainty, given in percent.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Magnitude","page":"Function index","title":"QuakeML.Magnitude","text":"Magnitude(; kwargs...)\n\nDescribes a magnitude which can, but does not need to be associated with an origin. Association with an origin is expressed with the optional field origin_id. It is either a combination of different magnitude estimations, or it represents the reported magnitude for the given event.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Magnitude. (Required field.)\nmag :: RealQuantity: Resulting magnitude value from combining values of type StationMagnitude. If no estimations are available, this value can represent the reported magnitude.  (Required field.)\ntype :: String: Describes the type of magnitude. This is a free-text field because it is impossible to cover all existing magnitude type designations with an enumeration. Possible values are unspecified magitude (\"M\"), local magnitude (\"ML\"), body wave magnitude (\"Mb\"), surface wave magnitude (\"MS\"), moment magnitude (\"Mw\"), duration magnitude (\"Md\"), coda magnitude (\"Mc\"), \"MH\", \"Mwp\", \"M50\", \"M100\", etc.\nstation_magnitude_contribution :: Vector{StationMagnitudeContribution}: Set of StationMagnitudeContributions describing the contributions of each station used to compute the magnitude.\norigin_id :: ResourceReference: Reference to an origin’s public_id if the magnitude has an associated Origin.\nmethod_id :: ResourceReference: Identifies the method of magnitude estimation. Users should avoid giving contradictory information in method_id and type.\nstation_count :: Int: Number of used stations for this magnitude computation.\nazimuthal_gap :: Float64: Azimuthal gap for this magnitude computation. Unit: °.\nevaluation_mode :: EvaluationMode: Evaluation mode of Magnitude (see EvaluationMode).\nevaluation_status :: EvaluationStatus: Evaluation status of Magnitude (see EvaluationStatus).\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the Magnitude object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.MomentTensor","page":"Function index","title":"QuakeML.MomentTensor","text":"MomentTensor(; kwargs...)\n\nRepresents a moment tensor solution for an event. It is an optional part of a FocalMechanism description.\n\nList of fields\n\npublic_id :: ResourceReference Resource identifier of MomentTensor. (Required field.)\nderived_origin_id :: ResourceReference: Refers to the public_id of the Origin derived in the moment tensor inversion.  (Required field.)\nmoment_magnitude_id :: ResourceReference: Refers to the public_id of the Magnitude object which represents the derived moment magnitude.\nscalar_moment :: RealQuantity: Scalar moment as derived in moment tensor inversion. Unit: N m.\ntensor :: Tensor: Tensor object holding the moment tensor elements.\nvariance :: Float64: Variance of moment tensor inversion.\nvariance_reduction :: Float64: Variance reduction of moment tensor inversion, given in percent (Dreger 2003). This is a goodness-of-fit measure.\ndouble_couple :: Float64: Double couple parameter obtained from moment tensor inversion (decimal fraction between 0 and 1).\nclvd :: Float64: CLVD (compensated linear vector dipole) parameter obtained from moment tensor inversion (decimal fraction between 0 and 1).\niso :: Float64: Isotropic part obtained from moment tensor inversion (decimal fraction between 0 and 1).\ngreens_function_id :: ResourceReference: Resource identifier of the Green’s function used in moment tensor inversion.\nfilter_id :: ResourceReference: Resource identifier of the filter setup used in moment tensor inversion.\nsource_time_function :: SourceTimeFunction: Source time function used in moment-tensor inversion.\ndata_used :: Vector{DataUsed}: Describes waveform data used for moment-tensor inversion.\nmethod_id :: ResourceReference: Resource identifier of the method used for moment-tensor inversion.\ncategory :: MomentTensorCategory: Category of moment tensor inversion. Valid entries are given in the following list (see MomentTensorCategory):\n\"teleseismic\"\n\"regional\"\ninversion_type :: MTInversionType: Type of moment tensor inversion.  Users should avoid giving contradictory information in inversion_type and method_id. Valid entries are given in the following list (see MTInversionType):\ngeneral\nzero trace\ndouble couple\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the MomentTensor object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.NodalPlane","page":"Function index","title":"QuakeML.NodalPlane","text":"NodalPlane(; strike, dip, rake)\n\nThis class describes a nodal plane using the fields strike, dip, and rake. For a definition of the angles see Aki and Richards (1980).\n\nList of fields\n\nstrike :: RealQuantity: Strike angle of nodal plane.  Unit: °.   (Required field.)\ndip :: RealQuantity: Dip angle of nodal plane.  Unit: °.   (Required field.)\nrake :: RealQuantity: Rake angle of nodal plane.  Unit: °.   (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.NodalPlanes","page":"Function index","title":"QuakeML.NodalPlanes","text":"NodalPlanes(; nodal_plane1=::NodalPlane, nodal_plane2=::NodalPlane, preferred_plane=::Int)\n\nThis describes the nodal planes of a moment tensor. The field preferred_plane can be used to define which plane is the preferred one, taking a value of 1 or 2.\n\nList of fields\n\nnodal_plane1 :: NodalPlane: First nodal plane of moment tensor.\nnodal_plane2 :: NodalPlane: Second nodal plane of moment tensor.\npreferred_plane :: Int: Indicator for preferred nodal plane of moment tensor. It can take integer values 1 or 2.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Origin","page":"Function index","title":"QuakeML.Origin","text":"Origin(; kwargs...)\n\nRepresents the focal time and geographical location of an earthquake hypocenter, as well as additional meta-information.  Origin can have objects of type OriginUncertainty and Arrival as fields.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Origin. (Required field.)\ntime: Focal time.  (Required field.)\nlongitude :: RealQuantity: Hypocenter longitude, with respect to the World Geodetic System 1984 (WGS84) reference system (National Imagery and Mapping Agency 2000).  Unit: °.  (Required field.)\nlatitude :: RealQuantity: Hypocenter latitude, with respect to the WGS84 reference system. Unit: °.  (Required field.)\ndepth :: RealQuantity: Depth of hypocenter with respect to the nominal sea level given by the WGS84 geoid (Earth Gravitational Model, EGM96, Lemoine et al. 1998). Positive values indicate hypocenters below sea level. For shallow hypocenters, the depth value can be negative. Note: Other standards use different conventions for depth measurement. As an example, GSE 2.0, defines depth with respect to the local surface. If event data is converted from other formats to QuakeML, depth values may have to be modified accordingly.  Unit: m.\ndepth_type :: OriginDepthType: Type of depth determination. Allowed values are the following (see OriginDepthType):\n\"from location\"\n\"from moment tensor inversion\",\n\"from modeling of broad-band P waveforms\"\n\"constrained by depth phases\",\n\"constrained by direct phases\"\n\"constrained by depth and direct phases\",\n\"operator assigned\"\n\"other\"\ntime_fixed :: Bool: Boolean flag. true if focal time was kept fixed for computation of the Origin.\nepicenter_fixed :: Bool: Boolean flag. true if epicenter was kept fixed for computationof Origin.\nreference_system_id :: ResourceReference: Identifies the reference system used for hypocenter determination. This is only necessary if a modified version of the standard (with local extensions) is used that provides a non-standard coordinate system.\nmethod_id :: ResourceReference: Identifies the method used for locating the event.\nearth_model_id :: ResourceReference: Identifies the earth model used in methodID.\ncomposite_time :: CompositeTime: Supplementary information on time of rupture start. Complex descriptions of focal times of historic events are possible, see description of the CompositeTime type. Note that even if composite_time is used, the mandatory time field has to be set too. It has to be set to the single point in time (with uncertainties allowed) that is most characteristic for the event.\nquality :: OriginQuality: Additional parameters describing the quality of an Origin determination.\ntype :: OriginType: Describes the Origin type. Allowed values are the following (see OriginType):\n\"hypocenter\"\n\"centroid\"\n\"amplitude\"\n\"macroseismic\"\n\"rupture start\"\n\"rupture end\"\nregion :: String: Can be used to decribe the geographical region of the epicenter location. Useful if an event has multiple origins from different agencies, and these have different region designations. Note that an event-wide region can be defined in the description field of an Event object. The user has to take care that this information corresponds to the region attribute of the preferred Origin. String with maximum length of 255 chars.\nevaluation_mode :: EvaluationMode: Evaluation mode of Origin (see EvaluationMode.\nevaluation_status :: EvaluationStatus: Evaluation status of Origin (see EvaluationStatus).\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the Origin object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.OriginQuality","page":"Function index","title":"QuakeML.OriginQuality","text":"OriginQuality(; kwargs...)\n\nThis type contains various attributes commonly used to describe the quality of an origin, e. g., errors, azimuthal coverage, etc.  Origin objects have an optional attribute of the type OriginQuality.\n\nList of fields\n\nassociated_phase_count :: Int: Number of associated phases, regardless of their use for origin computation.\nused_phase_count :: Int: Number of defining phases, i. e., phase observations that were actually used for computingthe origin. Note that there may be more than one defining phase per station.\nassociated_station_count :: Int: Number of stations at which the event was observed.\nused_station_count :: Int: Number of stations from which data was used for origin computation.\ndepth_phase_count :: Int: Number of depth phases (typically pP, sometimes sP) used in depth computation.\nstandard_error :: Float64: RMS of the travel time residuals of the arrivals used for the origin computation. Unit: s.\nazimuthal_gap :: Float64: Largest azimuthal gap in station distribution as seen from epicenter.  For an illustration of azimuthal gap and secondary azimuthal gap (see below), see Fig. 5 of Bondár et al. (2004). Unit: °.\nsecondary_azimuthal_gap :: Float64: Secondary azimuthal gap in station distribution, i. e., the largest azimuthal gap a station closes.  Unit: °.\nground_truth_level :: String: String describing ground-truth level, e. g. GT0, GT5, etc. It has a maximum length of 32 characters.\nminimum_distance :: Float64: Epicentral distance of station closest to the epicenter. Unit: °.\nmaximum_distance :: Float64: Epicentral distance of station farthest from the epicenter. Unit: °.\nmedian_distance :: Float64: Median epicentral distance of used stations.  Unit: °.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.OriginUncertainty","page":"Function index","title":"QuakeML.OriginUncertainty","text":"OriginUncertainty(; kwargs...)\n\nDescribes the location uncertainties of an origin. The uncertainty can be described either as a simple circular horizontal uncertainty, an uncertainty ellipse according to IMS1.0, or a confidence ellipsoid. If multiple uncertainty models are given, the preferred variant can be specified in the field preferred_description.\n\nList of fields\n\nhorizontal_uncertainty :: Float64: Circular confidence region, given by single value of horizontal uncertainty.  Unit: m.\nmin_horizontal_uncertainty :: Float64: Semi-minor axis of confidence ellipse. Unit: m.\nmax_horizontal_uncertainty :: Float64: Semi-major axis of confidence ellipse. Unit: m.\nazimuth_max_horizontal_uncertainty :: Float64: Azimuth of major axis of confidence ellipse. Measured clockwise from south-north direction at epicenter. Unit: °.\nconfidence_ellipsoid :: ConfidenceEllipsoid: Confidence ellipsoid (see ConfidenceEllipsoid).\npreferred_description :: OriginUncertaintyDescription: Preferred uncertainty description. Allowed values are the following (see OriginUncertaintyDescription:\n\"horizontal uncertainty\"\n\"uncertainty ellipse\"\n\"confidence ellipsoid\"\nconfidence_level :: Float64: Confidence level of the uncertainty, given in percent.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Phase","page":"Function index","title":"QuakeML.Phase","text":"Phase(code)\nPhase(; value=code)\n\nPhase code as given in the IASPEI Standard Seismic Phase List (Storchak et al. 2003). String with a maximum length of 32 characters.\n\nList of fields\n\nvalue :: String: Phase code. (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Pick","page":"Function index","title":"QuakeML.Pick","text":"Pick(; kwargs...)\n\nA pick is the observation of an amplitude anomaly in a seismogram at a specific point in time.  It is notnecessarily related to a seismic event.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of Pick.  (Required field.)\ntime :: TimeQuantity: Observed onset time of signal (“pick time”).  (Required field.)\nwaveform_id :: ResourceReference: Identifes the waveform stream. (Required field.)\nfilter_id :: ResourceReference: Identifies the filter or filter setup used for filtering the waveform stream referenced by waveform_id.\nmethod_id :: ResourceReference: Identifies the picker that produced the pick. This can be either a detection software program or aperson.\nhorizontal_slowness :: RealQuantity: Observed horizontal slowness of the signal. Most relevant in array measurements.  Unit: s/°.\nbackazimuth :: RealQuantity: Observed backazimuth of the signal. Most relevant in array measurements.  Unit: °.\nslowness_method_id :: ResourceReference: Identifies the method that was used to determine the slowness.\nonset :: PickOnset: Flag that roughly categorizes the sharpness of the onset. Allowed values are (see PickOnset):\n\"impulsive\"\n\"emergent\"\n\"questionable\"\nphase_hint :: Phase: Tentative phase identification as specified by the picker.\npolarity :: PickPolarity: Indicates the polarity of first motion, usually from impulsive onsets. Allowed values are (see PickPolarity):\n\"positive\"\n\"negative\"\n\"undecidable\"\nevaluation_mode :: EvaluationMode: Evaluation mode of Pick (see EvaluationMode).\nevaluation_status :: EvaluationStatus: Evaluation status of Pick (see EvaluationStatus).\ncomment :: Vector{Comment}: Additional comments.\ncreation_info :: CreationInfo: CreationInfo for the Pick object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.PrincipleAxes","page":"Function index","title":"QuakeML.PrincipleAxes","text":"PrincipleAxes(; t_axis, p_axis, n_axis)\n\nList of fields\n\ntAxis :: Axis: T (tension) axis of a moment tensor. (Required field.)\np_axis :: Axis: P (pressure) axis of a moment tensor. (Required field.)\nn_axis :: Axis: N (neutral) axis of a moment tensor.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.RealQuantity","page":"Function index","title":"QuakeML.RealQuantity","text":"RealQuantity(; kwargs...)\n\nPhysical quantities that can be expressed numerically—either as integers or as floating point numbers—are represented by their measured or computed values and optional values for symmetric or upper and lower uncertainties. The interpretation of these uncertainties is not defined in the standard. They can contain statistically well-defined error measures, but the mechanism can also be used to simply describe a possible value range. Ifthe confidence level of the uncertainty is known, it can be listed in the optional field confidence_level. Note that uncertainty, upper_uncertainty, and lower_uncertainty are given as absolute values of the deviation from the main value.\n\nList of fields\n\nvalue :: Float64: Value of the quantity. The unit is implicitly defined and depends on the context. (Required field.)\nuncertainty :: Float64: Uncertainty as the absolute value of symmetric deviation from the main value.\nlower_uncertainty :: Float64: Uncertainty as the absolute value of deviation from the main value towards smaller values.\nupper_uncertainty :: Float64: Uncertainty as the absolute value of deviation from the main value towards larger values.\nconfidence_level :: Float64: Confidence level of the uncertainty, given in percent.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.ResourceReference","page":"Function index","title":"QuakeML.ResourceReference","text":"ResourceReference(value)\nResourceReference(; value=::String)\n\nString that is used as a reference to a QuakeML resource. It must adhere to the format specificationsgiven in Sect. 3.1 of the QuakeML specificaiton. The string has a maximum length of 255 characters.\n\nIn this package, when creating objects which require a ResourceReference (usually in a field called public_id), a unique URI is created of the form \"smi:local/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\", where X represents a hexadecimal characters (matching r\"[0-9a-f]\").  This is generated by calling QuakeML.random_reference.\n\nFurther information\n\nIdentifiers take the generic form of:\n\n[smi|quakeml]:〈authority-id〉/〈resource-id〉[#〈local-id〉]\n\nThey consist of an authority identifier, a unique resource identifier, and an optional local identifier. The URI schema name smi stands for 'seismological meta-information', thus indicating a connection to a set of metadata associated with the resource.\n\nThe authority-id part must consist of at least three characters, of which the first character has to be alphanu-meric. The subsequent characters can be alphanumeric or from the following list: -, ., ~, *, ', (, ). After the authority-id, a forward slash (\"/\") must follow which separates the authority-id from the resource-id. The resource-id must contain at least one character, which can be either alphanumeric, or from the eight special characters which are allowed for the authority-id. For the remaining characters of the resource-id, also the comma (\",\") and semicolon (\";\") characters and characters from the following list can be used: +, ?, =, #, /, &. Note that the forward slash which separates authority-id and resource-id is always the first forwards lash in the resource identifier. The resource-id may be followed by a stop character (\"#\") and a local identifier which can be made up of alphanumeric characters, the comma (\",\") and semicolon (\";\") characters, and the characters from the following list: -, ., ~, *, ', (, ), /, +, =, ?. Local identifiers are thought to denote resources that have no own metadata description associated, but are part of a larger collection for which such metadata exists.\n\nFor even more information, see Section 3.1 of the QuakeML specification\n\nnote: Note\nResourceReferences are also called ResourceIdentifiers.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.SourceTimeFunction","page":"Function index","title":"QuakeML.SourceTimeFunction","text":"SourceTimeFunction(; type, duration, rise_time, decay_time)\n\nSource time function used in moment-tensor inversion.\n\nList of fields\n\ntype :: SourceTimeFunctionType: Type of source time function. Values can be taken from the following:\n\"box car\"\n\"triangle\"\n\"trapezoid\"\n\"unknown\"\n(Required field.)\nduration :: Float64 Source time function duration.  Unit: s.  (Required field.)\nrise_time :: Float64: Source time function rise time.  Unit: s.\ndecay_time :: Float64: Source time function decay time.  Unit: s.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.StationMagnitude","page":"Function index","title":"QuakeML.StationMagnitude","text":"StationMagnitude(; kwargs...)\n\nDescribes the magnitude derived from a single waveform stream.\n\nList of fields\n\npublic_id :: ResourceReference: Resource identifier of StationMagnitude. (Required field.)\norigin_id :: ResourceReference: Reference to an origin’s public_id if the StationMagnitude has an associatedOrigin.\nmag :: RealQuantity: Estimated magnitude.  (Required field.)\ntype :: String: See Magnitude.\namplitude_id :: ResourceReference: Identifies the data source of the StationMagnitude. For magnitudes derived from amplitudes in waveforms (e. g., local magnitude ML), amplitude_id points to public_id in Amplitude.\nmethod_id :: ResourceReference: See Magnitude.\nwaveform_id :: ResourceReference: Identifies the waveform stream. This element can be helpful if no amplitude is referenced, or the amplitude is not available in the context. Otherwise, it would duplicate the waveform_id provided there and can be omitted.\ncomment :: Vector{Comment}: Additional comments.\ncreationInfo :: CreationInfo: CreationInfo for the StationMagnitude object.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.StationMagnitudeContribution","page":"Function index","title":"QuakeML.StationMagnitudeContribution","text":"StationMagnitudeContribution(; station_magnitude_id, residual, weight)\n\nDescribes the weighting of magnitude values froms everal StationMagnitude objects for computing a network magnitude estimation.\n\nList of fields\n\nstationMagnitudeID :: ResourceReference: Refers to the publicID of a StationMagnitude object.  (Required field.)\nresidual :: Float64: Residual of magnitude computation.\nweight :: Float64: Weight of the magnitude value from StationMagnitude for computing the magnitude value in Magnitude. Note that there is no rule for the sum of the weights of all station magnitude contributions to a specific network magnitude. In particular, the weights are not required to sum up to unity.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.Tensor","page":"Function index","title":"QuakeML.Tensor","text":"Tensor(mrr, mtt, mpp, mrt, mrp, mtp)\nTensor(; mrr, mtt, mpp, mrt, mrp, mtp)\n\nThe Tensor type represents the six moment-tensor elements Mrr, Mtt, Mpp, Mrt, Mrp, Mtp in the spherical coordinate system defined by local upward vertical (r), North-South (t), and West-East (p) directions. See Aki and Richards(1980) for conversions to other coordinate systems.\n\nList of fields\n\nmrr :: RealQuantity: Moment-tensor component Mrr.  Unit: N m.  (Required field.)\nmtt :: RealQuantity: Moment-tensor component Mtt.  Unit: N m.  (Required field.)\nmpp :: RealQuantity: Moment-tensor component Mpp.  Unit: N m.  (Required field.)\nmrt :: RealQuantity: Moment-tensor component Mrt.  Unit: N m.  (Required field.)\nmrp :: RealQuantity: Moment-tensor component Mrp.  Unit: N m.  (Required field.)\nmtp :: RealQuantity: Moment-tensor component Mtp.  Unit: N m.  (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.TimeQuantity","page":"Function index","title":"QuakeML.TimeQuantity","text":"TimeQuantity(; kwargs...)\n\nDescribes a point in time, given in ISO 8601 format, with optional symmetric or asymmetric uncertainties given in seconds. The time has to be specified in UTC.\n\nList of fields\n\nvalue :: Dates.DateTime: Point in time (UTC), given in ISO 8601 format. (Required field.)\nuncertainty :: Float64: Symmetric uncertainty of point in time.  Unit: s.\nlower_uncertainty :: Float64: Lower uncertainty of point in time.  Unit: s.\nupper_uncertainty :: Float64: Upper uncertainty of point in time.  Unit: s.\nconfidence_level :: Float64: Confidence level of the uncertainty, given in percent.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.TimeWindow","page":"Function index","title":"QuakeML.TimeWindow","text":"TimeWindow(; begin_, end_, reference)\n\nDescribes a time window for amplitude measurements, given by a central point in time, and points in time before and after this central point. Both points before and after may coincide with the central point.\n\nList of fields\n\nbegin_ :: Float64: Absolute value of duration of time interval before reference point in time window. The value may be zero, but not negative. Unit: s. (Required field.)\nend_ :: Float64: Absolute value of duration of time interval after reference point in time window. The value may be zero, but not negative. Unit: s. (Required field.)\nreference :: Dates.DateTime: Reference point in time (“central” point). It has to be given in UTC.  (Required field.)\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.WaveformStreamID","page":"Function index","title":"QuakeML.WaveformStreamID","text":"WaveformStreamID(; kwargs...)\n\nReference to a stream description in an inventory. This is mostly equivalent to the combination of network_code, station_code, location_code, and channel_code. However, additional information, e. g., sampling rate, can be referenced by the resource uri. It is recommended to use resource URI as a flexible, abstract, and unique stream ID that allows to describe different processing levels, or resampled/filtered products of the same initialstream, without violating the intrinsic meaning of the legacy identifiers (network, station, channel, and location codes). However, for operation in the context of legacy systems, the classical identifier components are upported.\n\nList of fields\n\nnetwork_code :: String: Network code. String with a maximum length of 8 characters.  (Required field.)\nstation_code :: String: Station code. String with a maximum length of 8 characters.  (Required field.)\nchannel_code :: String: Channel code. String with a maximum length of 8 characters.\nlocation_code :: String: Location code. String with a maximum length of 8 characters.\nuri :: ResourceReference: Resource identifier for the waveform stream.\n\n\n\n\n\n","category":"type"},{"location":"function-index/#Private-types-and-functions-1","page":"Function index","title":"Private types and functions","text":"","category":"section"},{"location":"function-index/#ID-generation-1","page":"Function index","title":"ID generation","text":"","category":"section"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"QuakeML.random_reference","category":"page"},{"location":"function-index/#QuakeML.random_reference","page":"Function index","title":"QuakeML.random_reference","text":"random_reference() -> ::ResourceReference\n\nCreate a new, random ResourceReference.\n\n\n\n\n\n","category":"function"},{"location":"function-index/#Enumerated-types-1","page":"Function index","title":"Enumerated types","text":"","category":"section"},{"location":"function-index/#","page":"Function index","title":"Function index","text":"QuakeML.AmplitudeCategory\nQuakeML.AmplitudeUnit\nQuakeML.DataUsedWaveType\nQuakeML.EvaluationMode\nQuakeML.EvaluationStatus\nQuakeML.EventDescriptionType\nQuakeML.EventType\nQuakeML.EventTypeCertainty\nQuakeML.MomentTensorCategory\nQuakeML.MTInversionType\nQuakeML.OriginDepthType\nQuakeML.OriginType\nQuakeML.OriginUncertaintyDescription\nQuakeML.PickOnset\nQuakeML.PickPolarity\nQuakeML.SourceTimeFunctionType","category":"page"},{"location":"function-index/#QuakeML.AmplitudeCategory","page":"Function index","title":"QuakeML.AmplitudeCategory","text":"QuakeML.AmplitudeCategory(value)\nQuakeML.AmplitudeCategory(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"point\", \"mean\", \"duration\", \"period\", \"integral\" or \"other\".\n\nNote that when a field of another type is a QuakeML.AmplitudeCategory, it is not necessary to assign a field of type QuakeML.AmplitudeCategory to the field.  Instead, one can simply use a String, from which a QuakeML.AmplitudeCategory will be automatically constructed.\n\nFor this reason, QuakeML.AmplitudeCategory is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.AmplitudeCategory\n       end\n\njulia> es = ExampleStruct(\"point\")\nExampleStruct(QuakeML.AmplitudeCategory(\"point\"))\n\njulia> es.field = \"mean\"\n\"mean\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.AmplitudeUnit","page":"Function index","title":"QuakeML.AmplitudeUnit","text":"QuakeML.AmplitudeUnit(value)\nQuakeML.AmplitudeUnit(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"m\", \"s\", \"m/s\", \"m/(s*s)\", \"m*s\", \"dimensionless\" or \"other\".\n\nNote that when a field of another type is a QuakeML.AmplitudeUnit, it is not necessary to assign a field of type QuakeML.AmplitudeUnit to the field.  Instead, one can simply use a String, from which a QuakeML.AmplitudeUnit will be automatically constructed.\n\nFor this reason, QuakeML.AmplitudeUnit is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.AmplitudeUnit\n       end\n\njulia> es = ExampleStruct(\"m\")\nExampleStruct(QuakeML.AmplitudeUnit(\"m\"))\n\njulia> es.field = \"s\"\n\"s\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.DataUsedWaveType","page":"Function index","title":"QuakeML.DataUsedWaveType","text":"QuakeML.DataUsedWaveType(value)\nQuakeML.DataUsedWaveType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"P waves\", \"body waves\", \"surface waves\", \"mantle waves\", \"combined\" or \"unknown\".\n\nNote that when a field of another type is a QuakeML.DataUsedWaveType, it is not necessary to assign a field of type QuakeML.DataUsedWaveType to the field.  Instead, one can simply use a String, from which a QuakeML.DataUsedWaveType will be automatically constructed.\n\nFor this reason, QuakeML.DataUsedWaveType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.DataUsedWaveType\n       end\n\njulia> es = ExampleStruct(\"P waves\")\nExampleStruct(QuakeML.DataUsedWaveType(\"P waves\"))\n\njulia> es.field = \"body waves\"\n\"body waves\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EvaluationMode","page":"Function index","title":"QuakeML.EvaluationMode","text":"QuakeML.EvaluationMode(value)\nQuakeML.EvaluationMode(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"manual\" or \"automatic\".\n\nNote that when a field of another type is a QuakeML.EvaluationMode, it is not necessary to assign a field of type QuakeML.EvaluationMode to the field.  Instead, one can simply use a String, from which a QuakeML.EvaluationMode will be automatically constructed.\n\nFor this reason, QuakeML.EvaluationMode is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.EvaluationMode\n       end\n\njulia> es = ExampleStruct(\"manual\")\nExampleStruct(QuakeML.EvaluationMode(\"manual\"))\n\njulia> es.field = \"automatic\"\n\"automatic\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EvaluationStatus","page":"Function index","title":"QuakeML.EvaluationStatus","text":"QuakeML.EvaluationStatus(value)\nQuakeML.EvaluationStatus(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"preliminary\", \"confirmed\", \"reviewed\", \"final\" or \"rejected\".\n\nNote that when a field of another type is a QuakeML.EvaluationStatus, it is not necessary to assign a field of type QuakeML.EvaluationStatus to the field.  Instead, one can simply use a String, from which a QuakeML.EvaluationStatus will be automatically constructed.\n\nFor this reason, QuakeML.EvaluationStatus is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.EvaluationStatus\n       end\n\njulia> es = ExampleStruct(\"preliminary\")\nExampleStruct(QuakeML.EvaluationStatus(\"preliminary\"))\n\njulia> es.field = \"confirmed\"\n\"confirmed\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EventDescriptionType","page":"Function index","title":"QuakeML.EventDescriptionType","text":"QuakeML.EventDescriptionType(value)\nQuakeML.EventDescriptionType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"felt report\", \"Flinn-Engdahl region\", \"local time\", \"tectonic summary\", \"nearest cities\", \"earthquake name\" or \"region name\".\n\nNote that when a field of another type is a QuakeML.EventDescriptionType, it is not necessary to assign a field of type QuakeML.EventDescriptionType to the field.  Instead, one can simply use a String, from which a QuakeML.EventDescriptionType will be automatically constructed.\n\nFor this reason, QuakeML.EventDescriptionType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.EventDescriptionType\n       end\n\njulia> es = ExampleStruct(\"felt report\")\nExampleStruct(QuakeML.EventDescriptionType(\"felt report\"))\n\njulia> es.field = \"Flinn-Engdahl region\"\n\"Flinn-Engdahl region\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EventType","page":"Function index","title":"QuakeML.EventType","text":"QuakeML.EventType(value)\nQuakeML.EventType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"not existing\", \"not reported\", \"earthquake\", \"anthropogenic event\", \"collapse\", \"cavity collapse\", \"mine collapse\", \"building collapse\", \"explosion\", \"accidental explosion\", \"chemical explosion\", \"controlled explosion\", \"experimental explosion\", \"industrial explosion\", \"mining explosion\", \"quarry blast\", \"road cut\", \"blasting levee\", \"nuclear explosion\", \"induced or triggered event\", \"rock burst\", \"reservoir loading\", \"fluid injection\", \"fluid extraction\", \"crash\", \"plane crash\", \"train crash\", \"boat crash\", \"other event\", \"atmospheric event\", \"sonic boom\", \"sonic blast\", \"acoustic noise\", \"thunder\", \"avalanche\", \"snow avalanche\", \"debris avalanche\", \"hydroacoustic event\", \"ice quake\", \"slide\", \"landslide\", \"rockslide\", \"meteorite\" or \"volcanic eruption\".\n\nNote that when a field of another type is a QuakeML.EventType, it is not necessary to assign a field of type QuakeML.EventType to the field.  Instead, one can simply use a String, from which a QuakeML.EventType will be automatically constructed.\n\nFor this reason, QuakeML.EventType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.EventType\n       end\n\njulia> es = ExampleStruct(\"not existing\")\nExampleStruct(QuakeML.EventType(\"not existing\"))\n\njulia> es.field = \"not reported\"\n\"not reported\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.EventTypeCertainty","page":"Function index","title":"QuakeML.EventTypeCertainty","text":"QuakeML.EventTypeCertainty(value)\nQuakeML.EventTypeCertainty(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"known\" or \"suspected\".\n\nNote that when a field of another type is a QuakeML.EventTypeCertainty, it is not necessary to assign a field of type QuakeML.EventTypeCertainty to the field.  Instead, one can simply use a String, from which a QuakeML.EventTypeCertainty will be automatically constructed.\n\nFor this reason, QuakeML.EventTypeCertainty is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.EventTypeCertainty\n       end\n\njulia> es = ExampleStruct(\"known\")\nExampleStruct(QuakeML.EventTypeCertainty(\"known\"))\n\njulia> es.field = \"suspected\"\n\"suspected\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.MomentTensorCategory","page":"Function index","title":"QuakeML.MomentTensorCategory","text":"QuakeML.MomentTensorCategory(value)\nQuakeML.MomentTensorCategory(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"teleseismic\" or \"regional\".\n\nNote that when a field of another type is a QuakeML.MomentTensorCategory, it is not necessary to assign a field of type QuakeML.MomentTensorCategory to the field.  Instead, one can simply use a String, from which a QuakeML.MomentTensorCategory will be automatically constructed.\n\nFor this reason, QuakeML.MomentTensorCategory is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.MomentTensorCategory\n       end\n\njulia> es = ExampleStruct(\"teleseismic\")\nExampleStruct(QuakeML.MomentTensorCategory(\"teleseismic\"))\n\njulia> es.field = \"regional\"\n\"regional\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.MTInversionType","page":"Function index","title":"QuakeML.MTInversionType","text":"QuakeML.MTInversionType(value)\nQuakeML.MTInversionType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"general\", \"zero trace\" or \"double couple\".\n\nNote that when a field of another type is a QuakeML.MTInversionType, it is not necessary to assign a field of type QuakeML.MTInversionType to the field.  Instead, one can simply use a String, from which a QuakeML.MTInversionType will be automatically constructed.\n\nFor this reason, QuakeML.MTInversionType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.MTInversionType\n       end\n\njulia> es = ExampleStruct(\"general\")\nExampleStruct(QuakeML.MTInversionType(\"general\"))\n\njulia> es.field = \"zero trace\"\n\"zero trace\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.OriginDepthType","page":"Function index","title":"QuakeML.OriginDepthType","text":"QuakeML.OriginDepthType(value)\nQuakeML.OriginDepthType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"from location\", \"from moment tensor inversion\", \"from modeling of broad-band P waveforms\", \"constrained by depth phases\", \"constrained by direct phases\", \"constrained by depth and direct phases\", \"operator assigned\" or \"other\".\n\nNote that when a field of another type is a QuakeML.OriginDepthType, it is not necessary to assign a field of type QuakeML.OriginDepthType to the field.  Instead, one can simply use a String, from which a QuakeML.OriginDepthType will be automatically constructed.\n\nFor this reason, QuakeML.OriginDepthType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.OriginDepthType\n       end\n\njulia> es = ExampleStruct(\"from location\")\nExampleStruct(QuakeML.OriginDepthType(\"from location\"))\n\njulia> es.field = \"from moment tensor inversion\"\n\"from moment tensor inversion\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.OriginType","page":"Function index","title":"QuakeML.OriginType","text":"QuakeML.OriginType(value)\nQuakeML.OriginType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"hypocenter\", \"centroid\", \"amplitude\", \"macroseismic\", \"rupture start\" or \"rupture end\".\n\nNote that when a field of another type is a QuakeML.OriginType, it is not necessary to assign a field of type QuakeML.OriginType to the field.  Instead, one can simply use a String, from which a QuakeML.OriginType will be automatically constructed.\n\nFor this reason, QuakeML.OriginType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.OriginType\n       end\n\njulia> es = ExampleStruct(\"hypocenter\")\nExampleStruct(QuakeML.OriginType(\"hypocenter\"))\n\njulia> es.field = \"centroid\"\n\"centroid\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.OriginUncertaintyDescription","page":"Function index","title":"QuakeML.OriginUncertaintyDescription","text":"QuakeML.OriginUncertaintyDescription(value)\nQuakeML.OriginUncertaintyDescription(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"horizontal uncertainty\", \"uncertainty ellipse\" or \"confidence ellipsoid\".\n\nNote that when a field of another type is a QuakeML.OriginUncertaintyDescription, it is not necessary to assign a field of type QuakeML.OriginUncertaintyDescription to the field.  Instead, one can simply use a String, from which a QuakeML.OriginUncertaintyDescription will be automatically constructed.\n\nFor this reason, QuakeML.OriginUncertaintyDescription is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.OriginUncertaintyDescription\n       end\n\njulia> es = ExampleStruct(\"horizontal uncertainty\")\nExampleStruct(QuakeML.OriginUncertaintyDescription(\"horizontal uncertainty\"))\n\njulia> es.field = \"uncertainty ellipse\"\n\"uncertainty ellipse\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.PickOnset","page":"Function index","title":"QuakeML.PickOnset","text":"QuakeML.PickOnset(value)\nQuakeML.PickOnset(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"emergent\", \"impulsive\" or \"questionable\".\n\nNote that when a field of another type is a QuakeML.PickOnset, it is not necessary to assign a field of type QuakeML.PickOnset to the field.  Instead, one can simply use a String, from which a QuakeML.PickOnset will be automatically constructed.\n\nFor this reason, QuakeML.PickOnset is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.PickOnset\n       end\n\njulia> es = ExampleStruct(\"emergent\")\nExampleStruct(QuakeML.PickOnset(\"emergent\"))\n\njulia> es.field = \"impulsive\"\n\"impulsive\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.PickPolarity","page":"Function index","title":"QuakeML.PickPolarity","text":"QuakeML.PickPolarity(value)\nQuakeML.PickPolarity(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"positive\", \"negative\" or \"undecidable\".\n\nNote that when a field of another type is a QuakeML.PickPolarity, it is not necessary to assign a field of type QuakeML.PickPolarity to the field.  Instead, one can simply use a String, from which a QuakeML.PickPolarity will be automatically constructed.\n\nFor this reason, QuakeML.PickPolarity is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.PickPolarity\n       end\n\njulia> es = ExampleStruct(\"positive\")\nExampleStruct(QuakeML.PickPolarity(\"positive\"))\n\njulia> es.field = \"negative\"\n\"negative\"\n\n\n\n\n\n","category":"type"},{"location":"function-index/#QuakeML.SourceTimeFunctionType","page":"Function index","title":"QuakeML.SourceTimeFunctionType","text":"QuakeML.SourceTimeFunctionType(value)\nQuakeML.SourceTimeFunctionType(; value)\n\nEnumerated struct containing a single string which must be one of the following: \"box car\", \"triangle\", \"trapezoid\" or \"unknown\".\n\nNote that when a field of another type is a QuakeML.SourceTimeFunctionType, it is not necessary to assign a field of type QuakeML.SourceTimeFunctionType to the field.  Instead, one can simply use a String, from which a QuakeML.SourceTimeFunctionType will be automatically constructed.\n\nFor this reason, QuakeML.SourceTimeFunctionType is not exported even when bringing QuakeML's types into scope by doing using QuakeML.Types.\n\nExample\n\njulia> using QuakeML\n\njulia> mutable struct ExampleStruct\n           field::QuakeML.SourceTimeFunctionType\n       end\n\njulia> es = ExampleStruct(\"box car\")\nExampleStruct(QuakeML.SourceTimeFunctionType(\"box car\"))\n\njulia> es.field = \"triangle\"\n\"triangle\"\n\n\n\n\n\n","category":"type"}]
}
